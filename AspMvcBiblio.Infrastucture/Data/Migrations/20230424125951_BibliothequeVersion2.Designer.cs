// <auto-generated />
using System;
using AspMvcBiblio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspMvcBiblio.Data.Migrations
{
    [DbContext(typeof(BiblioContext))]
    [Migration("20230424125951_BibliothequeVersion2")]
    partial class BibliothequeVersion2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspMvcBiblio.Entities.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");
                });

            modelBuilder.Entity("BookTheme", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("ThemesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "ThemesId");

                    b.HasIndex("ThemesId");

                    b.ToTable("BookTheme");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.AuthorBook", b =>
                {
                    b.HasBaseType("AspMvcBiblio.Entities.Entity");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.HasDiscriminator().HasValue("AuthorBook");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Book", b =>
                {
                    b.HasBaseType("AspMvcBiblio.Entities.Entity");

                    b.Property<int>("CopiesNumber")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ServiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Keyword", b =>
                {
                    b.HasBaseType("AspMvcBiblio.Entities.Entity");

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Keyword_BookId");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("BookId");

                    b.HasDiscriminator().HasValue("Keyword");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Person", b =>
                {
                    b.HasBaseType("AspMvcBiblio.Entities.Entity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Theme", b =>
                {
                    b.HasBaseType("AspMvcBiblio.Entities.Entity");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Theme");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Author", b =>
                {
                    b.HasBaseType("AspMvcBiblio.Entities.Person");

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("BookTheme", b =>
                {
                    b.HasOne("AspMvcBiblio.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspMvcBiblio.Entities.Theme", null)
                        .WithMany()
                        .HasForeignKey("ThemesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.AuthorBook", b =>
                {
                    b.HasOne("AspMvcBiblio.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspMvcBiblio.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Keyword", b =>
                {
                    b.HasOne("AspMvcBiblio.Entities.Book", null)
                        .WithMany("KeyWords")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Book", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("KeyWords");
                });

            modelBuilder.Entity("AspMvcBiblio.Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
